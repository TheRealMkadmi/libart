name: Build & Release libart

on:
  push:
    branches:
      - master

jobs:
  build-and-package-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0            
          submodules: recursive            

      
      - name: Cache ccache
        uses: actions/cache@v4                                   
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi \
            ccache \
            zip                                              

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2                    
        with:
          cmake-version: 'latest'

      - name: Build all targets with ccache
        run: |
          for tgt in linux-x64 linux-arm64 linux-arm win-x64 win-x86; do
            for mode in shared static; do
              args="-DBUILD_SHARED_LIBS=$([ $mode = shared ] && echo ON || echo OFF)"
              cmake -S . -B build-$tgt-$mode \
                -DCMAKE_BUILD_TYPE=Release \
                $args \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                $( [[ $tgt == win* ]] && echo "-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_TOOLCHAIN_FILE=/usr/share/mingw-w64/toolchain-${tgt}" )
              # Build step
              cmake --build build-$tgt-$mode --config Release -- -j$(nproc)
            done
          done                                                    

      - name: Test shared builds
        run: |
          for tgt in linux-x64 linux-arm64 linux-arm win-x64 win-x86; do
            cmake --build build-$tgt-shared --target test
          done                                                    

      - name: Package artifacts
        run: |
          for tgt in linux-x64 linux-arm64 linux-arm win-x64 win-x86; do
            mkdir -p artifacts/$tgt
            cp build-$tgt-shared/libfoo* artifacts/$tgt/ || true
            cp build-$tgt-static/libfoo.a   artifacts/$tgt/ || true
            (cd artifacts/$tgt && zip libfoo-$tgt.zip *)
          done

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2                      
        with:
          files: artifacts/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-package-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install ccache
        run: brew install ccache                                 

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: 'latest'

      - name: Build universal macOS with ccache
        run: |
          cmake -S . -B build-macos \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build-macos --target all test -j$(sysctl -n hw.ncpu)

      - name: Package macOS artifacts
        run: |
          mkdir -p artifacts/darwin-universal
          cp build-macos/libfoo.{dylib,a} artifacts/darwin-universal/
          (cd artifacts/darwin-universal && zip libfoo-darwin-universal.zip *)

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/darwin-universal/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
